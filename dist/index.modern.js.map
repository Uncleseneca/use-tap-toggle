{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react'\n\nconst dataAttribute = 'tap'\nconst tapActiveValue = 'active'\nconst capture = false\n\nlet isTouchDevice = false\n\nconst getInteractiveEl = (event) => {\n  try {\n    return event\n      .composedPath()\n      .find((el) => el.dataset && el.dataset[dataAttribute] !== undefined)\n  } catch (e) {\n    return undefined\n  }\n}\n\nconst removeClass = (event) => {\n  const interactiveEl = getInteractiveEl(event)\n  if (!interactiveEl) return\n  if (event.type === 'click') {\n    // keep the tap style on 1 tick later in case the UI blocks\n    return setTimeout(() => {\n      interactiveEl.dataset[dataAttribute] = ''\n    })\n  }\n  interactiveEl.dataset[dataAttribute] = ''\n}\n\n// use \"click\" instead of \"touchend\" because it is triggered after touchend\n// and we want the tap styles to stay on the element as long as possible\n// (this makes a difference at least on later iOS versions)\nconst removeActiveClassEvents = ['touchmove', 'touchcancel', 'click']\n\nconst onTouchStart = (event) => {\n  if (!isTouchDevice) {\n    isTouchDevice = true\n    // we only need to add these listeners if it's a touch device\n    removeActiveClassEvents.forEach((event) =>\n      document.body.addEventListener(event, removeClass, capture)\n    )\n  }\n  const interactiveEl = getInteractiveEl(event)\n  if (interactiveEl) {\n    interactiveEl.dataset[dataAttribute] = tapActiveValue\n  }\n}\n\nfunction addTapListeners() {\n  document.body.addEventListener('touchstart', onTouchStart, capture)\n}\n\nfunction removeTapListeners() {\n  document.body.removeEventListener('touchstart', onTouchStart, capture)\n  removeActiveClassEvents.forEach((event) =>\n    document.body.removeEventListener(event, removeClass, capture)\n  )\n}\n\nexport default function useTapToggle() {\n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      addTapListeners()\n      return removeTapListeners\n    }\n  }, [])\n}\n"],"names":["dataAttribute","tapActiveValue","capture","isTouchDevice","getInteractiveEl","event","composedPath","find","el","dataset","undefined","e","removeClass","interactiveEl","type","setTimeout","removeActiveClassEvents","onTouchStart","forEach","document","body","addEventListener","addTapListeners","removeTapListeners","removeEventListener","useTapToggle","React","useEffect","window"],"mappings":";;AAEA,MAAMA,aAAa,GAAG,KAAtB;AACA,MAAMC,cAAc,GAAG,QAAvB;AACA,MAAMC,OAAO,GAAG,KAAhB;AAEA,IAAIC,aAAa,GAAG,KAApB;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,MAAI;AACF,WAAOA,KAAK,CACTC,YADI,GAEJC,IAFI,CAEEC,EAAD,IAAQA,EAAE,CAACC,OAAH,IAAcD,EAAE,CAACC,OAAH,CAAWT,aAAX,MAA8BU,SAFrD,CAAP;AAGD,GAJD,CAIE,OAAOC,CAAP,EAAU;AACV,WAAOD,SAAP;AACD;AACF,CARD;;AAUA,MAAME,WAAW,GAAIP,KAAD,IAAW;AAC7B,QAAMQ,aAAa,GAAGT,gBAAgB,CAACC,KAAD,CAAtC;AACA,MAAI,CAACQ,aAAL,EAAoB;;AACpB,MAAIR,KAAK,CAACS,IAAN,KAAe,OAAnB,EAA4B;AAE1B,WAAOC,UAAU,CAAC,MAAM;AACtBF,MAAAA,aAAa,CAACJ,OAAd,CAAsBT,aAAtB,IAAuC,EAAvC;AACD,KAFgB,CAAjB;AAGD;;AACDa,EAAAA,aAAa,CAACJ,OAAd,CAAsBT,aAAtB,IAAuC,EAAvC;AACD,CAVD;;AAeA,MAAMgB,uBAAuB,GAAG,CAAC,WAAD,EAAc,aAAd,EAA6B,OAA7B,CAAhC;;AAEA,MAAMC,YAAY,GAAIZ,KAAD,IAAW;AAC9B,MAAI,CAACF,aAAL,EAAoB;AAClBA,IAAAA,aAAa,GAAG,IAAhB;AAEAa,IAAAA,uBAAuB,CAACE,OAAxB,CAAiCb,KAAD,IAC9Bc,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+BhB,KAA/B,EAAsCO,WAAtC,EAAmDV,OAAnD,CADF;AAGD;;AACD,QAAMW,aAAa,GAAGT,gBAAgB,CAACC,KAAD,CAAtC;;AACA,MAAIQ,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACJ,OAAd,CAAsBT,aAAtB,IAAuCC,cAAvC;AACD;AACF,CAZD;;AAcA,SAASqB,eAAT,GAA2B;AACzBH,EAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,YAA/B,EAA6CJ,YAA7C,EAA2Df,OAA3D;AACD;;AAED,SAASqB,kBAAT,GAA8B;AAC5BJ,EAAAA,QAAQ,CAACC,IAAT,CAAcI,mBAAd,CAAkC,YAAlC,EAAgDP,YAAhD,EAA8Df,OAA9D;AACAc,EAAAA,uBAAuB,CAACE,OAAxB,CAAiCb,KAAD,IAC9Bc,QAAQ,CAACC,IAAT,CAAcI,mBAAd,CAAkCnB,KAAlC,EAAyCO,WAAzC,EAAsDV,OAAtD,CADF;AAGD;;AAEc,SAASuB,YAAT,GAAwB;AACrCC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCN,MAAAA,eAAe;AACf,aAAOC,kBAAP;AACD;AACF,GALD,EAKG,EALH;AAMD;;;;"}